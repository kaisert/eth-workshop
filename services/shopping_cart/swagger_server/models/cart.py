# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models import Article
from swagger_server import util


class Cart(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, articles: List[Article]=None, abandoned: bool=None, complete: bool=False):  # noqa: E501
        """Cart - a model defined in Swagger

        :param articles: The articles of this Cart.  # noqa: E501
        :type articles: List[Article]
        :param abandoned: The abandoned of this Cart.  # noqa: E501
        :type abandoned: bool
        :param complete: The complete of this Cart.  # noqa: E501
        :type complete: bool
        """
        self.swagger_types = {
            'articles': List[Article],
            'abandoned': bool,
            'complete': bool
        }

        self.attribute_map = {
            'articles': 'articles',
            'abandoned': 'abandoned',
            'complete': 'complete'
        }

        self._articles = articles
        self._abandoned = abandoned
        self._complete = complete

    @classmethod
    def from_dict(cls, dikt) -> 'Cart':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Cart of this Cart.  # noqa: E501
        :rtype: Cart
        """
        return util.deserialize_model(dikt, cls)

    @property
    def articles(self) -> List[Article]:
        """Gets the articles of this Cart.


        :return: The articles of this Cart.
        :rtype: List[Article]
        """
        return self._articles

    @articles.setter
    def articles(self, articles: List[Article]):
        """Sets the articles of this Cart.


        :param articles: The articles of this Cart.
        :type articles: List[Article]
        """

        self._articles = articles

    @property
    def abandoned(self) -> bool:
        """Gets the abandoned of this Cart.


        :return: The abandoned of this Cart.
        :rtype: bool
        """
        return self._abandoned

    @abandoned.setter
    def abandoned(self, abandoned: bool):
        """Sets the abandoned of this Cart.


        :param abandoned: The abandoned of this Cart.
        :type abandoned: bool
        """

        self._abandoned = abandoned

    @property
    def complete(self) -> bool:
        """Gets the complete of this Cart.


        :return: The complete of this Cart.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete: bool):
        """Sets the complete of this Cart.


        :param complete: The complete of this Cart.
        :type complete: bool
        """

        self._complete = complete
