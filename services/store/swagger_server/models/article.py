# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Article(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, price: float=None, in_storage: bool=None, quantity: int=None, description: str=None, id: int=None, next_ship_date: datetime=None):  # noqa: E501
        """Article - a model defined in Swagger

        :param price: The price of this Article.  # noqa: E501
        :type price: float
        :param in_storage: The in_storage of this Article.  # noqa: E501
        :type in_storage: bool
        :param quantity: The quantity of this Article.  # noqa: E501
        :type quantity: int
        :param description: The description of this Article.  # noqa: E501
        :type description: str
        :param id: The id of this Article.  # noqa: E501
        :type id: int
        :param next_ship_date: The next_ship_date of this Article.  # noqa: E501
        :type next_ship_date: datetime
        """
        self.swagger_types = {
            'price': float,
            'in_storage': bool,
            'quantity': int,
            'description': str,
            'id': int,
            'next_ship_date': datetime
        }

        self.attribute_map = {
            'price': 'price',
            'in_storage': 'inStorage',
            'quantity': 'quantity',
            'description': 'description',
            'id': 'id',
            'next_ship_date': 'nextShipDate'
        }

        self._price = price
        self._in_storage = in_storage
        self._quantity = quantity
        self._description = description
        self._id = id
        self._next_ship_date = next_ship_date

    @classmethod
    def from_dict(cls, dikt) -> 'Article':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Article of this Article.  # noqa: E501
        :rtype: Article
        """
        return util.deserialize_model(dikt, cls)

    @property
    def price(self) -> float:
        """Gets the price of this Article.


        :return: The price of this Article.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this Article.


        :param price: The price of this Article.
        :type price: float
        """

        self._price = price

    @property
    def in_storage(self) -> bool:
        """Gets the in_storage of this Article.


        :return: The in_storage of this Article.
        :rtype: bool
        """
        return self._in_storage

    @in_storage.setter
    def in_storage(self, in_storage: bool):
        """Sets the in_storage of this Article.


        :param in_storage: The in_storage of this Article.
        :type in_storage: bool
        """

        self._in_storage = in_storage

    @property
    def quantity(self) -> int:
        """Gets the quantity of this Article.


        :return: The quantity of this Article.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this Article.


        :param quantity: The quantity of this Article.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def description(self) -> str:
        """Gets the description of this Article.


        :return: The description of this Article.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Article.


        :param description: The description of this Article.
        :type description: str
        """

        self._description = description

    @property
    def id(self) -> int:
        """Gets the id of this Article.


        :return: The id of this Article.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Article.


        :param id: The id of this Article.
        :type id: int
        """

        self._id = id

    @property
    def next_ship_date(self) -> datetime:
        """Gets the next_ship_date of this Article.


        :return: The next_ship_date of this Article.
        :rtype: datetime
        """
        return self._next_ship_date

    @next_ship_date.setter
    def next_ship_date(self, next_ship_date: datetime):
        """Sets the next_ship_date of this Article.


        :param next_ship_date: The next_ship_date of this Article.
        :type next_ship_date: datetime
        """

        self._next_ship_date = next_ship_date
